getwd()
dir("data")
dir()
ls -rlt
?download.file
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","data/pml-training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv","data/pml-testing.csv")
dir("data")
training = read.csv(data/pml-training.csv)
training = read.csv("data/pml-training.csv")
View(training)
View(training)
testing = read.csv("data/pml-testing.csv")
View(testing)
View(testing)
colnames(training)
summary(training)
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
traininSet <- training[inTrain, ];
testingSet <- training[-inTrain, ]
training = read.csv(data/pml-training.csv)
test = read.csv("data/pml-testing.csv")
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
library(caret)
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
trainingSet <- training[inTrain, ];
testingSet <- training[-inTrain, ]
rm(list = ls())
library(caret)
training = read.csv(data/pml-training.csv)
test = read.csv("data/pml-testing.csv")
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
trainingSet <- training[inTrain, ];
testingSet <- training[-inTrain, ]
dim(myTraining)
dim(myTesting)
rm(list = ls())
library(caret)
training = read.csv(data/pml-training.csv)
test = read.csv("data/pml-testing.csv")
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
trainingSet <- training[inTrain, ];
testingSet <- training[-inTrain, ]
rm(list = ls())
library(caret)
training = read.csv("data/pml-training.csv")
test = read.csv("data/pml-testing.csv")
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
trainingSet <- training[inTrain, ];
testingSet <- training[-inTrain, ]
View(trainingSet)
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
trainingSet <- training[inTrain, ]
testingSet <- training[-inTrain, ]
View(training)
View(trainingSet)
rm(list = ls())
library(caret)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
test = read.csv("data/pml-testing.csv")
View(xtraining)
?read.csv
View(xtraining)
View(xtraining)
View(training)
View(training)
rm(list = ls())
library(caret)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("#DIV/0!",""))
View(training)
View(training)
View(xtraining)
View(xtraining)
rm(list = ls())
library(caret)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA",#DIV/0!",""))
test = read.csv("data/pml-testing.csv")
rm(list = ls())
library(caret)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA",#DIV/0!",""))
)
rm(list = ls())
library(caret)
xtraining = read.csv("data/pml-training.csv")
rm(list = ls())
library(caret)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("#DIV/0!",""))
test = read.csv("data/pml-testing.csv")
View(xtraining)
View(xtraining)
View(training)
View(training)
rm(list = ls())
library(caret)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
test = read.csv("data/pml-testing.csv")
View(training)
View(training)
View(xtraining)
View(xtraining)
View(test)
View(test)
rm(list = ls())
library(caret)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
test = read.csv("data/pml-testing.csv",na.strings = c("NA","#DIV/0!",""))
inTrain <- createDataPartition(y=training$classe, p=0.6, list=FALSE)
trainingSet <- training[inTrain, ]
testingSet <- training[-inTrain, ]
str(training)
summary(training)
View(training)
View(training)
training$classe
str(training);summary(training)
?str
?summary
training = training[,-1:7]
training = training[,c(-1:7)]
training = training[,-c(1:7)]
View(training)
View(training)
?is.na
is.na(training$roll_belt)
unique(is.na(training$roll_belt))
?omit.na
na.omit(training)
training = na.omit(trainingSet)
m(list = ls())
library(caret)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
test = read.csv("data/pml-testing.csv",na.strings = c("NA","#DIV/0!",""))
str(training);summary(training)
#remove data not needed
training = training[,-c(1:7)]
colSums(is.na(training))
training = training[,colSums(is.na(training)<nrow(training))
)
training = training[,colSums(is.na(training)<nrow(training))]
training = training[,colSums(is.na(training)<nrow(training)]
training = training
training = training[,colSums(is.na(training))<nrow(training)]
View(training)
View(training)
View(training)
View(training)
View(training)
View(training)
str(training)
summary(training)
view(summary(training))
View(training)
View(training)
View(summary(training))
training$classe
Modrpart = train(classe ~ .,data = training, method = "rpart", )
Modrpart = train(classe ~ .,data = training, method = "rpart" )
Modrpart
m(list = ls())
library(caret)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
test = read.csv("data/pml-testing.csv",na.strings = c("NA","#DIV/0!",""))
str(training);summary(training)
#remove data not needed
training = training[,-c(1:7)]
#remove all columns with only NA
training = training[,colSums(is.na(training))<nrow(training)]
modrpart = train(classe ~ .,data = training, method = "rpart" )
modrf = train(classe ~ .,data = training, method = "rf" )
rm(list = ls())
library(caret);library(randomForest)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
test = read.csv("data/pml-testing.csv",na.strings = c("NA","#DIV/0!",""))
str(training);summary(training)
#remove data not needed
training = training[,-c(1:7)]
#remove all columns with only NA
training = training[,colSums(is.na(training))<nrow(training)]
modrpart = train(classe ~ .,data = training, method = "rpart" )
modrf = train(classe ~ .,data = training, method = "rf" )
modrf
modrpart
inTrain = createDataPartition(data = training,p=0.6)[[1]]
inTrain = createDataPartition(training$classe,p=0.6)[[1]]
inTrain = createDataPartition(training$classe,p=0.6)[[1]]
trainingSet = training[inTrain,]
testingSet = training[-inTrain,]
modrpart = train(classe ~ .,data = trainingSet, method = "rpart" )
modrf = train(classe ~ .,data = trainingSet, method = "rf" )
rpart.results = predict(modrpart,testingSet)
View(rpart.results)
rpart.results
confusionMatrix(testingSet$classe,rpart.results)$overall["Accuracy"]
confusionMatrix(testingSet$classe,rpart.results)$overall["Accuracy"]
confusionMatrix(testingSet$classe,rpart.results)
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
test = read.csv("data/pml-testing.csv",na.strings = c("NA","#DIV/0!",""))
#str(training);summary(training)
#remove data not needed
training = training[,-c(1:7)]
#remove all columns with only NA
training = training[,colSums(is.na(training))<nrow(training)]
inTrain = createDataPartition(training$classe,p=0.6)[[1]]
trainingSet = training[inTrain,]
testingSet = training[-inTrain,]
modrpart = train(classe ~ .,data = trainingSet, method = "rpart" )
rpart.results = predict(modrpart,testingSet)
rpart.results
length(rpart.results)
View(rpart.results)
confusionMatrix(testingSet$classe,rpart.results)
testingSet$classe
rpart.results
rm(list = ls())
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis,p=3/4)[[1]]
training = adData[inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
rf = train(diagnosis ~ .,method = "rf",data = training)
gbm = train(diagnosis ~ .,method = "gbm", data = training)
lda = train(diagnosis ~ .,method = "lda", data = training)
rs.result = predict(rf,testing)
gbm.result = predict(gbm,testing)
lda.result = predict(lda,testing)
combined.data = data.frame(rs.result,gbm.result,lda.result, diagnosis=testing$diagnosis)
combined.model = train(diagnosis ~ .,data = combined.data, method = "rf")
combined.result = predict(combined.model,testing)
confusionMatrix(testing$diagnosis,rs.result)$overall['Accuracy']
confusionMatrix(testing$diagnosis,gbm.result)$overall['Accuracy']
confusionMatrix(testing$diagnosis,lda.result)$overall['Accuracy']
confusionMatrix(testing$diagnosis,combined.result)$overall['Accuracy']
View(testing)
rs.result
testing$diagnosis
m(list = ls())
library(caret);library(randomForest)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
test = read.csv("data/pml-testing.csv",na.strings = c("NA","#DIV/0!",""))
#str(training);summary(training)
#remove data not needed
training = training[,-c(1:7)]
#remove all columns with only NA
training = training[,colSums(is.na(training))<nrow(training)]
rm(list = ls())
library(caret);library(randomForest)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
test = read.csv("data/pml-testing.csv",na.strings = c("NA","#DIV/0!",""))
#str(training);summary(training)
#remove data not needed
training = training[,-c(1:7)]
#remove all columns with only NA
training = training[,colSums(is.na(training))<nrow(training)]
inTrain = createDataPartition(training$classe,p=0.6)[[1]]
trainingSet = training[inTrain,]
testingSet = training[-inTrain,]
modrpart = train(classe ~ .,data = trainingSet, method = "rpart" )
rpart.results = predict(modrpart,testingSet)
rpart.results
modrpart
confusionMatrix(testingSet$classe,rpart.results)
?train
?rpart
modrpart2 = rpart(classe ~ .,data = trainingSet)
rpart2.results = predict(modrpart2,testingSet)
modrpart2
confusionMatrix(testingSet$classe,rpart2.results)
rpart2.results = predict(modrpart2,testingSet)
rpart2.results
rm(list = ls())
library(caret);library(randomForest)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
test = read.csv("data/pml-testing.csv",na.strings = c("NA","#DIV/0!",""))
#str(training);summary(training)
#remove data not needed
training = training[,-c(1:7)]
colSum(is.na(training))
colSums(is.na(training))
View(colSums(is.na(training)))
rm(list = ls())
library(caret);library(randomForest)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
test = read.csv("data/pml-testing.csv",na.strings = c("NA","#DIV/0!",""))
#str(training);summary(training)
training = training[,-c(1:7)]
training = training[,colSums(is.na(training))<nrow(training)]
View(training)
rm(list = ls())
library(caret);library(randomForest)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
test = read.csv("data/pml-testing.csv",na.strings = c("NA","#DIV/0!",""))
#str(training);summary(training)
#remove data not needed
training = training[,-c(1:7)]
training = training[,colSums(is.na(training))==0]
View(training)
View(training)
?colSums
rm(list = ls())
library(caret);library(randomForest)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
test = read.csv("data/pml-testing.csv",na.strings = c("NA","#DIV/0!",""))
#str(training);summary(training)
#remove data not needed
training = training[,-c(1:7)]
colSums(is.na(training))
is.na(training)
nrow(training)
training = training[,colSums(is.na(training))==0]
inTrain = createDataPartition(training$classe,p=0.6)[[1]]
trainingSet = training[inTrain,]
testingSet = training[-inTrain,]
modrpart = train(classe ~ .,data = trainingSet, method = "rpart" )
rpart.results = predict(modrpart,testingSet)
confusionMatrix(testingSet$classe,rpart.results)
modrf = train(classe ~ .,data = trainingSet, method = "rf" )
rf.results = predict(modrf,testingSet)
confusionMatrix(testingSet$classe,rf.results)
predict(modrf,test)
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
install.packages("parallel")
rm(list = ls())
library(caret);library(randomForest)
set.seed(1234)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
test = read.csv("data/pml-testing.csv",na.strings = c("NA","#DIV/0!",""))
#str(training);summary(training)
#remove data not needed
training = training[,-c(1:7)]
#remove all columns with only NA
training = training[,colSums(is.na(training))==0]
#createTrain and Test data sets
inTrain = createDataPartition(training$classe,p=0.6)[[1]]
trainingSet = training[inTrain,]
testingSet = training[-inTrain,]
detectCores()
modrpart = train(classe ~ .,data = trainingSet, method = "rpart" )
modrf = train(classe ~ .,data = trainingSet, method = "rf" )
rpart.results = predict(modrpart,testingSet)
rf.results = predict(modrf,testingSet)
confusionMatrix(testingSet$classe,rpart.results)
confusionMatrix(testingSet$classe,rf.results)
predict(modrf,test)
?rfcv
rfcv(trainingSet[,1:length(ncol(trainingSet))-1],trainingSet$classe,cv.fold = 3)
trainingSet[,1:length(ncol(trainingSet))-1]
length(ncol(trainingSet))-1
ncol(trainingSet)
ncol(trainingSet)-1
trainingSet[,1:ncol(trainingSet)-1]
rfcv(trainingSet[,1:ncol(trainingSet)-1],trainingSet$classe,cv.fold = 3)
date
getTime()
Sys.time()
rfcv(trainingSet[,1:ncol(trainingSet)-1],trainingSet$classe,cv.fold = 3)
Sys.time()
install.packages("parallelrandomforrest")
?download.file
View(trainingSet)
View(trainingSet)
View(xtraining)
View(xtraining)
confusionMatrix(testingSet$classe$rpart.results)
confusionMatrix(testingSet$classe,rpart.results)
confusionMatrix(testingSet$classe,rpart.results)[1]
confusionMatrix(testingSet$classe,rpart.results)
cm = confusionMatrix(testingSet$classe,rpart.results)
cm[1]
cm[2]
cm[3]
cm[3][1]
cm[3][1]
cm[3][1,1]
x = cm[3]
x$Accurary
x$Accuracy
x$['Accuracy']
x['Accuracy']
x["Accuracy"]
x
cm$overall
cm$overall[1]
class(cm$overall[1])
The accuracy from the Tree model is ```r cm_rp$overall[1]`
The accuracy from the Tree model is ```r cm_rp$overall[1]``` khkjhkh
The accuracy from the Tree model is ```r cm_rp$overall[1]``` khkjhkh
The accuracy from the Tree model is
clear()
cm _rp = confusionMatrix(testingSet$classe,rf.results)
cm_rp = confusionMatrix(testingSet$classe,rf.results)
#cm_rp = confusionMatrix(testingSet$classe,rf.results)
cm_rp = confusionMatrix(testingSet$classe,rf.results)
rm(list = ls())
rm(list = ls())
library(caret);library(randomForest)
set.seed(1234)
xtraining = read.csv("data/pml-training.csv")
training = read.csv("data/pml-training.csv",na.strings = c("NA","#DIV/0!",""))
test = read.csv("data/pml-testing.csv",na.strings = c("NA","#DIV/0!",""))
#str(training);summary(training)
#remove data not needed
training = training[,-c(1:7)]
#remove all columns with only NA
training = training[,colSums(is.na(training))==0]
#createTrain and Test data sets
inTrain = createDataPartition(training$classe,p=0.6)[[1]]
trainingSet = training[inTrain,]
testingSet = training[-inTrain,]
modrpart = train(classe ~ .,data = trainingSet, method = "rpart" )
modrf = train(classe ~ .,data = trainingSet, method = "rf" )
rpart.results = predict(modrpart,testingSet)
rf.results = predict(modrf,testingSet)
confusionMatrix(testingSet$classe,rpart.results)
confusionMatrix(testingSet$classe,rf.results)
predict(modrf,test)
test
summary(test)
View(test)
View(test)
test$classe
library(parallel)
library(doParallel)
install.packages("doParallel")
library(doParallel)
detectCores()
Sys.time()
library(parallel)
library(doParallel)
cluster = makeCluster(detectCores()-1)
registerDoParallel(cluster)
fitControl = trainControl(method = "cv", number = 10, allowParallel = TRUE)
modrf_p = train(classe ~ .,data = trainingSet, method = "rf", trControl = fitControl)
stopCluster(cluster)
Sys.time()
rfp.results = predict(modrf_p,testingSet)
confusionMatrix(testingSet$classe,rfp.results)
predict(modrf_p,test)
library(parallel)
library(doParallel)
cluster = makeCluster(detectCores()-1)
registerDoParallel(cluster)
fitControl = trainControl(method = "cv", number = 10, allowParallel = TRUE)
modrf = train(classe ~ .,data = trainingSet, method = "rf", trControl = fitControl)
install.packages("rattle")
